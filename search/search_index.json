{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-genet","title":"Welcome to GenET","text":"<p>GenET (Genome Editing Toolkit) is a library of various python functions for the purpose of analyzing and evaluating data from genome editing experiments. </p> <p>GenET is still in its early stages of development and continue to improve and expand. Currently planned functions include guideRNA design, saturation library design, deep sequenced data analysis, and guide RNA activity prediction.</p>"},{"location":"#who-should-use-genet","title":"Who should use GenET?","text":"<p>GenET was developed for anyone interested in the field of genome editing. Especially, Genet can provide aid to those with the following objectives.: </p> <ul> <li>Develop a quick and easy to design an genome editing experiment for a specific gene.</li> <li>Perform genome editing analysis based on sequening data</li> <li>Predict the activtiy of specific guideRNAs or all guideRNAs designed for editing a specific product.</li> </ul>"},{"location":"#get-help","title":"Get Help","text":"<p>The fastest way to get help is through Slack channel. You can also see our Issue log for answers to questions asked in the past by other members or raise a new question if it's not asked before. </p>"},{"location":"#support-genet","title":"Support GenET","text":""},{"location":"#star-genet-on-github","title":"\u2b50 Star GenET on GitHub","text":"<p>Give GenET a star on our GitHub repository (click the star button on the top right corner)</p>"},{"location":"#tweet-about-genet","title":"\ud83d\udce2 Tweet about GenET","text":"<p>Help GenET spread the word. We love to hear success stories and use cases.</p>"},{"location":"getting_started/","title":"Getting started","text":"<p>GenET is a Python-based library that allows for the design and analysis of various genome editing-related research. It provides convenient features for utilizing CRISPR systems (Cas9, base editing, prime editing) with ease.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>GenET can be easily installed using PyPI. Please check the installation guide for the installation instructions. <pre><code>pip install genet\n</code></pre></p>"},{"location":"getting_started/#example-usage-of-genet-for-genome-editing-research","title":"Example Usage of GenET for Genome Editing Research","text":"<p>Through GenET, various features are available (or planned to be added) to facilitate research on genetic information and studies using CRISPR.</p> <p>Case1: </p> <pre><code># Testing import genet modules\n\nimport genet.database\nimport genet.analysis\nimport genet.design\nimport genet.models\nimport genet.predict\nimport genet.utils\n</code></pre>"},{"location":"getting_started/#need-help","title":"Need help?","text":"<p>Look at the issues section to find out about specific cases and others.</p> <p>If you still have doubts or cannot solve the problem, please consider opening an issue </p> <p>Please send all comments and questions to gsyu93@gmail.com</p>"},{"location":"getting_started/#genet-citation","title":"GenET Citation","text":"<pre><code>@Manual {GenET, \n    title = {GenET: Python package for genome editing research}, \n    author = {Goosang Yu}, \n    year = {2024}, \n    month = {January}, \n    note = {GenET version 0.13.3}, \n    url = {https://github.com/Goosang-Yu/genet}\n    }\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#system-requirement","title":"System requirement","text":"<p>GenET can be run on either Mac or Linux system. GenET is currently available on Linux or Mac based systems as one of the dependent tools, ViennaRNA package, is limited to these operating systems. Windows users must establish a WSL, docker or virtual OS environment to use this tool.</p> <p>GenET is tested and supported on 64-bit systems with: - Python 3.8, 3.9 and 3.10 - Ubuntu 20.04 or later - WSL (Ubuntu 20.04 or later) on Window 10 - CentOS 7 - OSX (MacOS)</p>"},{"location":"installation/#1-create-virtual-environment-and-install-genet","title":"1/ Create virtual environment and install genet","text":"<pre><code># Create virtual env for genet. (python 3.8 was tested)\nconda create -n genet python=3.8\nconda activate genet\n\n# Install genet ( &gt;= ver. 0.7.0)\npip install genet\n</code></pre>"},{"location":"installation/#2-install-pytorch-v1110-was-tested","title":"2/ Install Pytorch (v1.11.0 was tested)","text":"<p>Pytorch ver.2 is not compatible yet. <pre><code># For OSX (MacOS)\npip install torch==1.11.0\n\n# For Linux and Windows\n# CUDA 11.3\npip install torch==1.11.0+cu113 --extra-index-url https://download.pytorch.org/whl/cu113\n\n# CUDA 10.2\npip install torch==1.11.0+cu102 --extra-index-url https://download.pytorch.org/whl/cu102\n\n# CPU only\npip install torch==1.11.0+cpu --extra-index-url https://download.pytorch.org/whl/cpu\n</code></pre></p>"},{"location":"installation/#3-install-viennarna","title":"3/ Install ViennaRNA","text":"<pre><code># install ViennaRNA package for prediction module\nconda install viennarna\n</code></pre>"},{"location":"installation/#trouble-shooting-for-installation","title":"Trouble shooting for installation","text":""},{"location":"installation/#1-glibcxx-importerror","title":"1/ GLIBCXX ImportError","text":"<p><pre><code>ImportError: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by /home/hkim/.miniconda3/envs/genet/lib/python3.8/site-packages/RNA/_RNA.cpython-38-x86_64-linux-gnu.so)'\n</code></pre> If the above error message appears in the process of loading the Vienna RNA, install  higher version of 'libgcc' using mamba (see alse). <pre><code>conda activate genet\nconda install -c conda-forge mamba\nmamba install libgcc\n</code></pre></p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#genome-and-genetic-information","title":"Genome and Genetic Information","text":"<p>Genome refers to the entire set of genetic information of an organism. While most genomes exist in the form of DNA, some organisms, such as certain viruses, have genomes composed of RNA. The genome of eukaryotes like humans is mostly found in the DNA within the nucleus, but a small portion of the genome also exists outside the nucleus, in structures like mitochondria. These genomes consist of long combinations of nucleotides (A, T, G, C) that encode the instructions necessary for various cellular functions. In the case of humans, the genome contains approximately 3 billion base pairs of DNA sequence information.</p> <p>Within the genome, specific regions contain information crucial for the expression of proteins, necessary for various life processes, and these regions are called genes. Although the terms gene and genome are sometimes used interchangeably, the genome encompasses the entire genetic information, including genes.</p> <p>Genes that accurately carry protein information play a vital role in maintaining normal cellular activities. Mutations in genes can lead to the improper synthesis of essential proteins, resulting in diseases or difficulties in sustaining life. Conditions arising from damaged genetic information are referred to as genetic diseases.</p>"},{"location":"introduction/#gene-editing","title":"Gene Editing","text":"<p>In the Korean academic community, genome editing is often referred to as 'gene editing,' although the term 'genome editing' is more precise. This choice is made for ease of understanding among the general public.</p> <p>Gene editing involves the technology to modify specific genetic information at desired locations within the genome. Early research on gene editing utilized techniques like Zinc Finger Nucleases (ZFN) and Transcription Activator-Like Effector Nucleases (TALEN). Currently, the CRISPR (Clustered Regularly Interspaced Short Palindromic Repeats) technology is predominantly researched.</p>"},{"location":"introduction/#mechanism-of-crispr","title":"Mechanism of CRISPR","text":"<p>CRISPR is a unique sequence structure discovered by scientists specializing in the study of bacterial genes. It consists of repeated sequences with specific intervals of spacer sequences. While many gene sequences were previously unknown, the regular repetition of sequences was uncommon. This structure, found not only in specific bacterial strains but also in numerous species, was later identified as the guide RNA (gRNA) that specifies the location for the action of a gene-editing protein called Cas9.</p> <p></p>"},{"location":"introduction/#various-types-of-crispr-systems","title":"Various Types of CRISPR Systems","text":"<p>Early gene editing technologies mostly caused double-strand breaks (DSB), posing risks of unintended damage to genes. Later, base editors (BE) were developed, allowing gene editing without inducing DSB, significantly enhancing safety for correcting most single nucleotide variations (SNVs). Recently, prime editing (PE) was developed, enabling all forms of gene editing (substitution, insertion, deletion) without causing DSB, expanding the scope of gene editing.</p>"},{"location":"introduction/#utilizing-genet-for-genome-editing-research","title":"Utilizing GenET for Genome Editing Research","text":"<p>Through GenET, various functionalities are available (or planned) for research on genetic information and CRISPR. The provided (and planned) features include:</p> Module Functions Descriptions Status Predict SpCas9 Use of the DeepSpCas9 model Available Predict SpCas9variants Use of the DeepSpCas9variants model Available Predict Base editor Use of the DeepBE model Planned Predict DeepPrime Use of the DeepPrime model for all possible pegRNAs Available Predict DeepPrimeGuideRNA Use of the DeepPrime model for already designed pegRNA Available Predict DeepPrimeOff Use of the DeepPrime-Off model for searching and predicting off-targets Available Design KOLiD Genome-wide KO library design Planned Design ReLiD Gene regulation library design Planned Design CRISPRStop Design gRNA for inducing premature stop codon using CBE Planned Design SynonymousPE Design pegRNA containing additional synonymousmutation in RT template Available Database GetGenome Function to retrieve genome data from NCBI database Available Database GetChromosome Function to retrieve chromosome data from NCBI database Available Database GetGene Function to retrieve information about a specific gene from NCBI database Planned Database GenBankParser Function to extract desired information from GenBank files Planned Database DFConverter Function to convert the format of NCBI GenBank files to DataFrame Available Analysis SGE Function for analyzing Saturation Genome Editing data Planned Analysis UMItools Functions for UMI analysis (from UMI-tools) Available Utils request_file Function to download files from the server using the HTTP protocol Available Utils SplitFastq Function to split FASTQ files into smaller sizes Available"},{"location":"1_Predict/1_howworks/","title":"How it works","text":"<p>Why is gRNA design important?</p> <p>The efficiency of CRISPR systems for genome editing is determined by the gRNA and its corresponding target sequence information. Specific motifs or GC contents of the sequence can have an impact.</p>"},{"location":"1_Predict/1_howworks/#high-throughput-screening","title":"High-throughput screening","text":""},{"location":"1_Predict/1_howworks/#features-determining-genome-editing-efficiencies","title":"Features determining genome editing efficiencies","text":""},{"location":"1_Predict/2_predict_cas9/","title":"Cas9 nuclease","text":""},{"location":"1_Predict/2_predict_cas9/#predict-spcas9-activity","title":"Predict SpCas9 activity","text":"<p>DeepSpCas9 is a prediction model developed to evaluate to indel frequency introduced by sgRNAs at specific target sites mediated by the SpCas9 (Kim et al. SciAdv 2019). The model was developed on tensorflow (version &gt;= 2.6). Any dependent packages will be installed along with the GenET package.</p> <pre><code>from genet.predict import SpCas9\n\n# Put the target context (30bp) that you want to find Cas9 activity in the list.\n# Input seq: 4bp 5' context + 20 guide + 3bp PAM + 3bp 3' context\n\nspcas = SpCas9()\n\nlist_target = [\n                'TCACCTTCGTTTTTTTCCTTCTGCAGGAGG',\n                'CCTTCGTTTTTTTCCTTCTGCAGGAGGACA',\n                'CTTTCAAGAACTCTTCCACCTCCATGGTGT',\n                ]\n\ndf_out = spcas.predict(list_target)\n\n&gt;&gt;&gt; df_out\n</code></pre> Target Spacer SpCas9 0 TCACCTTCGTTTTTTTCCTTCTGCAGGAGG CTTCGTTTTTTTCCTTCTGC 2.801172 1 CCTTCGTTTTTTTCCTTCTGCAGGAGGACA CGTTTTTTTCCTTCTGCAGG 2.253288 2 CTTTCAAGAACTCTTCCACCTCCATGGTGT CAAGAACTCTTCCACCTCCA 53.43182 <p>Alternatively, you can identify all possible SpCas9 target sites within an extensive gene sequence and obtain predictive scores. <pre><code>from genet.predict import SpCas9\n\n# Put the whole sequence context that you want to find Cas9 target site.\ngene = 'ttcagctctacgtctcctccgagagccgcttcaacaccctggccgagttggttcatcatcattcaacggtggccgacgggctcatcaccacgctccattatccagccccaaagcgcaacaagcccactgtctatggtgtgtcccccaactacgacaagtgggagatggaacgcacggacatcaccatgaagcacaagctgggcgggggccagtacggggaggtgtacgagggcgtgtggaagaaatacagcctgacggtggccgtgaagaccttgaaggtagg'\n\nspcas = SpCas9()\ndf_out = spcas.search(gene)\n\n&gt;&gt;&gt; df_out.head()\n</code></pre></p> Target Spacer Strand Start End SpCas9 0 CCTCCGAGAGCCGCTTCAACACCCTGGCCG CGAGAGCCGCTTCAACACCC + 15 45 67.39446 1 GCCGCTTCAACACCCTGGCCGAGTTGGTTC CTTCAACACCCTGGCCGAGT + 24 54 27.06508 2 CCGAGTTGGTTCATCATCATTCAACGGTGG GTTGGTTCATCATCATTCAA + 42 72 34.11356 3 AGTTGGTTCATCATCATTCAACGGTGGCCG GGTTCATCATCATTCAACGG + 45 75 76.43662 4 TCATCATCATTCAACGGTGGCCGACGGGCT CATCATTCAACGGTGGCCGA + 52 82 29.63767"},{"location":"1_Predict/2_predict_cas9/#predict-spcas9variants-activity","title":"Predict SpCas9variants activity","text":"<p>DeepSpCas9 is a prediction model developed to evaluate to indel frequency introduced by sgRNAs at specific target sites mediated by the SpCas9 PAM variants (Kim et al. Nat.Biotechnol. 2020). The model was developed on tensorflow (version &gt;= 2.6). Any dependent packages will be installed along with the GenET package.</p> <pre><code>from genet.predict import CasVariant\n\n# Available Cas9 variants: \n# SpCas9-NG, SpCas9-NRCH, SpCas9-NRRH, SpCas9-NRTH, SpCas9-Sc++, SpCas9-SpCas9, SpCas9-SpG, SpCas9-SpRY, SpCas9-VRQR\ncas_ng = CasVariant('SpCas9-NG')\n\n# Put the target context (30bp) that you want to find Cas9 activity in the list.\n# Input seq: 4bp 5' context + 20 guide + 3bp PAM + 3bp 3' context\n\nlist_target30 = [\n                'TCACCTTCGTTTTTTTCCTTCTGCAGGAGG',\n                'CCTTCGTTTTTTTCCTTCTGCAGGAGGACA',\n                'CTTTCAAGAACTCTTCCACCTCCATGGTGT',\n                ]\n\ndf_out = cas_ng.predict(list_target30)\n\n&gt;&gt;&gt; df_out\n</code></pre> Target Spacer SpCas9-NG 0 TCACCTTCGTTTTTTTCCTTCTGCAGGAGG CTTCGTTTTTTTCCTTCTGC 0.618299 1 CCTTCGTTTTTTTCCTTCTGCAGGAGGACA CGTTTTTTTCCTTCTGCAGG 1.134845 2 CTTTCAAGAACTCTTCCACCTCCATGGTGT CAAGAACTCTTCCACCTCCA 36.74358 <p>Similarly, in CasVariants, you can also utilize the 'search' method. It automatically identifies targets corresponding to each PAM variant and calculates predictive scores. For instance, SpCas9-NRCH identifies NG+NA+NNG PAMs.</p> <pre><code>from genet.predict import CasVariant\n\n# Put the whole sequence context that you want to find Cas9Variants target site.\ngene = 'ttcagctctacgtctcctccgagagccgcttcaacaccctggccgagttggttcatcatcattcaacggtggccgacgggctcatcaccacgctccattatccagccccaaagcgcaacaagcccactgtctatggtgtgtcccccaactacgacaagtgggagatggaacgcacggacatcaccatgaagcacaagctgggcgggggccagtacggggaggtgtacgagggcgtgtggaagaaatacagcctgacggtggccgtgaagaccttgaaggtagg'\n\n\ncas_ng = CasVariant('SpCas9-NRCH')\ndf_out = cas_ng.search(gene)\n\n&gt;&gt;&gt; df_out.head()\n</code></pre> Target Spacer Strand Start End SpCas9-NRCH 0 TCAGCTCTACGTCTCCTCCGAGAGCCGCTT CTCTACGTCTCCTCCGAGAG + 1 31 26.43327 1 CAGCTCTACGTCTCCTCCGAGAGCCGCTTC TCTACGTCTCCTCCGAGAGC + 2 32 40.16034 2 CTACGTCTCCTCCGAGAGCCGCTTCAACAC GTCTCCTCCGAGAGCCGCTT + 7 37 47.06001 3 TACGTCTCCTCCGAGAGCCGCTTCAACACC TCTCCTCCGAGAGCCGCTTC + 8 38 20.26012 4 CGTCTCCTCCGAGAGCCGCTTCAACACCCT TCCTCCGAGAGCCGCTTCAA + 10 40 45.58047"},{"location":"1_Predict/3_predict_be/","title":"Base editor","text":"<p>Coming soon</p>"},{"location":"1_Predict/4_predict_pe/","title":"DeepPrime","text":""},{"location":"1_Predict/4_predict_pe/#predict-prime-editing-efficiency","title":"Predict Prime editing efficiency","text":"<p> DeepPrime is a prediction model for evaluating prime editing guideRNAs (pegRNAs) that target specific target sites for prime editing (Yu et al. Cell 2023). DeepSpCas9 prediction score is calculated simultaneously and requires tensorflow (version &gt;=2.6). DeepPrime was developed on pytorch.</p>"},{"location":"1_Predict/4_predict_pe/#how-to-use-deepprime","title":"How to Use DeepPrime","text":"<p>To use DeepPrime, you need to prepare a DNA sequence containing the intended prime editing and surrounding context information as input. Intended prime editing can only involve 1-3nt substitution, insertion, or deletion, and it is not possible to introduce multiple edit types in combination. The position where prime editing is introduced is indicated in parentheses, and the original and prime-edited sequences are separated using '/'.</p> <p>Some example inputs are as follows:</p> <p></p> <pre><code># Example 1: 1bp substitution (T to A)\ninput_seq = 'CTCACGTGAGCTCTTTGAGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCT(T/A)CAGCTCTACGTCTCCTCCGAGAGCCGCTTCAACACCCTGGCCGAGTTGGTTCATCATCAT'\n</code></pre> <p></p> <pre><code># Example 2: 3bp insertion (CTT insertion)\ninput_seq = 'CTCACGTGAGCTCTTTGAGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCT(/CTT)TCAGCTCTACGTCTCCTCCGAGAGCCGCTTCAACACCCTGGCCGAGTTGGTTCATCATCAT'\n</code></pre> <p></p> <pre><code># Example 3: 2bp deletion (TC deletion)\ninput_seq = 'CTCACGTGAGCTCTTTGAGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCT(TC/)AGCTCTACGTCTCCTCCGAGAGCCGCTTCAACACCCTGGCCGAGTTGGTTCATCATCAT'\n</code></pre> <p>If you have prepared the input as described above, you can use DeepPrime as follows. When you input the target sequence and editing informations into DeepPrime and run it, it designs all possible types of pegRNAs for the given sequence and automatically calculates their corresponding biofeatures. You can check the calculated biofeatures using <code>.features</code>.</p> <pre><code>from genet.predict import DeepPrime\n\ninput_seq = 'CTCACGTGAGCTCTTTGAGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCT(T/A)CAGCTCTACGTCTCCTCCGAGAGCCGCTTCAACACCCTGGCCGAGTTGGTTCATCATCAT'\n\npegrna = DeepPrime(input_seq)\n\n# check designed pegRNAs\n&gt;&gt;&gt; pegrna.features.head()\n</code></pre> ID Spacer RT-PBS PBS_len RTT_len RT-PBS_len Edit_pos Edit_len RHA_len Target ... deltaTm_Tm4-Tm2 GC_count_PBS GC_count_RTT GC_count_RT-PBS GC_contents_PBS GC_contents_RTT GC_contents_RT-PBS MFE_RT-PBS-polyT MFE_Spacer DeepSpCas9_score 0 SampleName AAGACAACACCCTTGCCTTG CGTCTCAGTTTCTGGGAGCTTTGAAAACTCCACAAGGCAAGG 7 35 42 34 1 1 ATAAAAGACAACACCCTTGCCTTGTGGAGTTTTCAAAGCTCCCAGA... ... -340.105 5 16 21 71.42857 45.71429 50 -10.4 -0.6 45.96754 1 SampleName AAGACAACACCCTTGCCTTG CGTCTCAGTTTCTGGGAGCTTTGAAAACTCCACAAGGCAAGGG 8 35 43 34 1 1 ATAAAAGACAACACCCTTGCCTTGTGGAGTTTTCAAAGCTCCCAGA... ... -340.105 6 16 22 75 45.71429 51.16279 -10.4 -0.6 45.96754 2 SampleName AAGACAACACCCTTGCCTTG CGTCTCAGTTTCTGGGAGCTTTGAAAACTCCACAAGGCAAGGGT 9 35 44 34 1 1 ATAAAAGACAACACCCTTGCCTTGTGGAGTTTTCAAAGCTCCCAGA... ... -340.105 6 16 22 66.66667 45.71429 50 -10.4 -0.6 45.96754 3 SampleName AAGACAACACCCTTGCCTTG CGTCTCAGTTTCTGGGAGCTTTGAAAACTCCACAAGGCAAGGGTG 10 35 45 34 1 1 ATAAAAGACAACACCCTTGCCTTGTGGAGTTTTCAAAGCTCCCAGA... ... -340.105 7 16 23 70 45.71429 51.11111 -10.4 -0.6 45.96754 4 SampleName AAGACAACACCCTTGCCTTG CGTCTCAGTTTCTGGGAGCTTTGAAAACTCCACAAGGCAAGGGTGT 11 35 46 34 1 1 ATAAAAGACAACACCCTTGCCTTGTGGAGTTTTCAAAGCTCCCAGA... ... -340.105 7 16 23 63.63636 45.71429 50 -10.4 -0.6 45.96754 <p>Next, select model PE system and run DeepPrime <pre><code>pe2max_output = pegrna.predict(pe_system='PE2max', cell_type='HEK293T')\n\n&gt;&gt;&gt; pe2max_output.head()\n</code></pre></p> ID PE2max_score Spacer RT-PBS PBS_len RTT_len RT-PBS_len Edit_pos Edit_len RHA_len Target 0 SampleName 0.904387 AAGACAACACCCTTGCCTTG CGTCTCAGTTTCTGGGAGCTTTGAAAACTCCACAAGGCAAGG 7 35 42 34 1 1 ATAAAAGACAACACCCTTGCCTTGTGGAGTTTTCAAAGCTCCCAGA... 1 SampleName 2.375938 AAGACAACACCCTTGCCTTG CGTCTCAGTTTCTGGGAGCTTTGAAAACTCCACAAGGCAAGGG 8 35 43 34 1 1 ATAAAAGACAACACCCTTGCCTTGTGGAGTTTTCAAAGCTCCCAGA... 2 SampleName 2.61238 AAGACAACACCCTTGCCTTG CGTCTCAGTTTCTGGGAGCTTTGAAAACTCCACAAGGCAAGGGT 9 35 44 34 1 1 ATAAAAGACAACACCCTTGCCTTGTGGAGTTTTCAAAGCTCCCAGA... 3 SampleName 3.641537 AAGACAACACCCTTGCCTTG CGTCTCAGTTTCTGGGAGCTTTGAAAACTCCACAAGGCAAGGGTG 10 35 45 34 1 1 ATAAAAGACAACACCCTTGCCTTGTGGAGTTTTCAAAGCTCCCAGA... 4 SampleName 3.768321 AAGACAACACCCTTGCCTTG CGTCTCAGTTTCTGGGAGCTTTGAAAACTCCACAAGGCAAGGGTGT 11 35 46 34 1 1 ATAAAAGACAACACCCTTGCCTTGTGGAGTTTTCAAAGCTCCCAGA..."},{"location":"1_Predict/4_predict_pe/#predicting-efficiencies-of-existing-pegrnas","title":"Predicting efficiencies of existing pegRNAs","text":"<p>When the target, PBS, and RT template sequences are accurately inputted, <code>DeepPrimeGuideRNA</code> predicts the DeepPrime score of the corresponding pegRNA. For example, let's assume we have the following target and pegRNA:</p> <p></p> <p>To obtain the DeepPrime score of the pegRNA above, you can execute the code as follow; similar to <code>.predict</code> method in <code>DeepPrime</code>, you can specify <code>pe_system</code> and <code>cell_type</code>.</p> <pre><code>from genet.predict import DeepPrimeGuideRNA\n\ntarget    = 'TTTAAGGTTTCAGTTGACATTTGCAGGTTATAGTTCTTCTCAGTTTCTGGGAGCTTTGAAAACTCCACAAGGCA'\npbs       = 'AATGTCAAC'\nrtt       = 'AGAAACTGAGACGAACTATAACCTGCA'\nedit_len  = 1\nedit_pos  = 16\nedit_type = 'sub'\n\npegrna = DeepPrimeGuideRNA('pegRNA_test', target=target, pbs=pbs, rtt=rtt, \n                           edit_len=edit_len, edit_pos=edit_pos, edit_type=edit_type)\n\npe2max_score = pegrna.predict('PE2max')\nprint(pe2max_score) # 8.23717212677002\n</code></pre> <p>The inputs for <code>DeepPrimeGuideRNA</code> are configured as follows:</p> Input Type Description sID str Name of sample or pegRNA target str 4nt additional context sequence must be included in the 5' direction. The Protospacer (region to which the guide sequence is attached) is oriented in the 5'-&gt;3' direction and the target sequence must be 74nt in length. pbs str The PBS sequence from the pegRNA. Both T (DNA) and U (RNA) forms are acceptable. rtt str The RT template sequence from the pegRNA. Both T (DNA) and U (RNA) forms are acceptable. edit_len int Select one of 1, 2, or 3 according to the intended prime editing. edit_pos int Select one from 1-40 according to the intended prime editing. edit_type str Select one from 'sub', 'ins', 'del' according to the intended prime editing."},{"location":"1_Predict/4_predict_pe/#current-available-deepprime-models","title":"Current available DeepPrime models:","text":"Cell type PE system Model HEK293T PE2 DeepPrime_base HEK293T NRCH_PE2 DeepPrime-FT: HEK293T, NRCH-PE2 with Optimized scaffold HEK293T NRCH_PE2max DeepPrime-FT: HEK293T, NRCH-PE2max with Optimized scaffold HEK293T PE2 DeepPrime-FT: HEK293T, PE2 with Conventional scaffold HEK293T PE2max-e DeepPrime-FT: HEK293T, PE2max with Optimized scaffold and epegRNA HEK293T PE2max DeepPrime-FT: HEK293T, PE2max with Optimized scaffold HEK293T PE4max-e DeepPrime-FT: HEK293T, PE4max with Optimized scaffold and epegRNA HEK293T PE4max DeepPrime-FT: HEK293T, PE4max with Optimized scaffold A549 PE2max-e DeepPrime-FT: A549, PE2max with Optimized scaffold and epegRNA A549 PE2max DeepPrime-FT: A549, PE2max with Optimized scaffold A549 PE4max-e DeepPrime-FT: A549, PE4max with Optimized scaffold and epegRNA A549 PE4max DeepPrime-FT: A549, PE4max with Optimized scaffold DLD1 NRCH_PE4max DeepPrime-FT: DLD1, NRCH-PE4max with Optimized scaffold DLD1 PE2max DeepPrime-FT: DLD1, PE2max with Optimized scaffold DLD1 PE4max DeepPrime-FT: DLD1, PE4max with Optimized scaffold HCT116 PE2 DeepPrime-FT: HCT116, PE2 with Optimized scaffold HeLa PE2max DeepPrime-FT: HeLa, PE2max with Optimized scaffold MDA-MB-231 PE2 DeepPrime-FT: MDA-MB-231, PE2 with Optimized scaffold NIH3T3 NRCH_PE4max DeepPrime-FT: NIH3T3, NRCH-PE4max with Optimized scaffold"},{"location":"1_Predict/4_predict_pe/#get-clinvar-record-and-deepprime-score-using-genet","title":"Get ClinVar record and DeepPrime score using GenET","text":"<p>ClinVar database contains mutations that are clinically evaluated to be pathogenic and related to human diseases(Laudrum et al. NAR 2018). GenET utilized the NCBI efect module to access ClinVar records to retrieve related variant data such as the genomic sequence, position, and mutation pattern. Using this data, GenET designs and evaluates pegRNAs that target the variant using DeepPrime.</p> <pre><code>from genet import database as db\n\n# Accession (VCV) or variantion ID is available\ncv_record = db.GetClinVar('VCV000428864.3')\n\nprint(cv_record.seq()) # default context length = 60nt\n\n&gt;&gt;&gt; output: # WT sequence, Alt sequence\n('GGTCACTCACCTGGAGTGAGCCCTGCTCCCCCCTGGCTCCTTCCCAGCCTGGGCATCCTTGAGTTCCAAGGCCTCATTCAGCTCTCGGAACATCTCGAAGCGCTCACGCCCACGGATCTGC',\n 'GGTCACTCACCTGGAGTGAGCCCTGCTCCCCCCTGGCTCCTTCCCAGCCTGGGCATCCTTGTTCCAAGGCCTCATTCAGCTCTCGGAACATCTCGAAGCGCTCACGCCCACGGATCTGCAG')\n</code></pre> <p>In addition, various information other than the sequence can be obtained from the record.</p> <pre><code># for example, variant length of the record\nprint(cv_record.alt_len)\n\n&gt;&gt;&gt; output:\n2\n</code></pre> <p>Clinvar records obtained through this process is used to design all possible pegRNAs within the genet.predict module's pecv_score function.</p> <pre><code>from genet import database as db\nfrom genet import predict as prd\n\ncv_record = db.GetClinVar('VCV000428864.3')\nprd.pecv_score(cv_record)\n</code></pre>"},{"location":"1_Predict/5_DeepPrime-Off/","title":"DeepPrime-Off","text":""},{"location":"1_Predict/5_DeepPrime-Off/#how-to-use-deepprime","title":"How to Use DeepPrime","text":"<p>To use DeepPrime-Off, you need to prepare pegRNA and thier feature informations in a specific format as an input. Also, DeepPrime-Off uses Cas-OFFinder to find off-target candidates for each pegRNA spacer.</p> <pre><code>import pandas as pd\nfrom genet.predict import DeepPrimeOff\n\ndp_off = DeepPrimeOff()\n\ndp_off.setup(\n    features=df_features,\n    cas_offinder_result='OFFinder_output.txt',\n    ref_genome='Homo sapiens', \n    download_fasta=True,\n    custom_genome=None, \n)\n</code></pre> ID Spacer RT-PBS PBS_len RTT_len RT-PBS_len Edit_pos Edit_len RHA_len Target ... deltaTm_Tm4-Tm2 GC_count_PBS GC_count_RTT GC_count_RT-PBS GC_contents_PBS GC_contents_RTT GC_contents_RT-PBS MFE_RT-PBS-polyT MFE_Spacer DeepSpCas9_score 48_ABL1_ex4_pos6C_A_rank3 TGCCTGTCTCTGTGGGCTGA GAGGAGACGTAGATCTGAAGGAAACAGGGAACAGCCTTCAGCCCAC... 10 40 50 27 1 13 AGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCA... ... -345.645 7 20 27 70 50 54 -10.7 -5.9 42.90589 66_ABL1_ex4_pos8C_A_rank3 TGCCTGTCTCTGTGGGCTGA GAGGAGACGTATAGCTGAAGGAAACAGGGAACAGCCTTCAGCCCAC... 10 40 50 29 1 11 AGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCA... ... -345.645 7 20 27 70 50 54 -14.3 -5.9 42.90589 69_ABL1_ex4_pos8C_G_rank3 TGCCTGTCTCTGTGGGCTGA GAGGAGACGTACAGCTGAAGGAAACAGGGAACAGCCTTCAGCCCAC... 10 40 50 29 1 11 AGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCA... ... -345.645 7 21 28 70 52.5 56 -14.3 -5.9 42.90589 72_ABL1_ex4_pos8C_T_rank3 TGCCTGTCTCTGTGGGCTGA GAGGAGACGTAAAGCTGAAGGAAACAGGGAACAGCCTTCAGCCCAC... 10 40 50 29 1 11 AGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCA... ... -345.645 7 20 27 70 50 54 -14.3 -5.9 42.90589 96_ABL1_ex4_pos11C_G_rank3 TGCCTGTCTCTGTGGGCTGA GAGGAGACCTAGAGCTGAAGGAAACAGGGAACAGCCTTCAGCCCAC... 10 40 50 32 1 8 AGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCA... ... -345.645 7 21 28 70 52.5 56 -15.5 -5.9 42.90589 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 11476_ABL1_ex9_pos100A_C_rank1 CAGGAATCCAGTATCTCAGA ATGGGTACGTTACCGTCTGAGATACTGG 10 18 28 10 1 8 GTTCCAGGAATCCAGTATCTCAGACGGTAAAGTACCCATCCCGGGG... ... -483.811 5 9 14 50 50 50 -3.3 -1.3 55.85136 11479_ABL1_ex9_pos100A_G_rank1 CAGGAATCCAGTATCTCAGA GGGTACCTTACCGTCTGAGATACTGG 10 16 26 10 1 6 GTTCCAGGAATCCAGTATCTCAGACGGTAAAGTACCCATCCCGGGG... ... -320.805 5 9 14 50 56.25 53.84615 -3.6 -1.3 55.85136 <p>The <code>predict</code> function can be executed after setup is completed. The <code>features</code> DataFrame, internally created by the <code>DeepPrimeOff</code> object during setup, is used as input for the DeepPrime-Off model. Therefore, if the <code>setup</code> is not completed properly, the model will not be able to find the required input and will raise an error.</p> <pre><code>dp_off_retuls = dp_off.predict()\n&gt;&gt;&gt; dp_off_retuls\n</code></pre> ID DeepPrime-Off_score Spacer RT-PBS PBS_len RTT_len RT-PBS_len Edit_pos Edit_len RHA_len Target Off-target Off-context Location Position Strand MM_num 48_ABL1_ex4_pos6C_A_rank3 0 TGCCTGTCTCTGTGGGCTGA GAGGAGACGTAGATCTGAAGGAAACAGGGAACAGCCTTCAGCCCAC... 10 40 50 27 1 13 AGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCA... TtCCTGTCTgTGTGGGCTGATGG TTATTTCCTGTCTGTGTGGGCTGATGGTCCTTCAATCATTGAAGTC... 1 dna:chromosome chromosome:GRCh38:1:1:2489564... 1.66E+08 + 2 66_ABL1_ex4_pos8C_A_rank3 0 TGCCTGTCTCTGTGGGCTGA GAGGAGACGTATAGCTGAAGGAAACAGGGAACAGCCTTCAGCCCAC... 10 40 50 29 1 11 AGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCA... TtCCTGTCTgTGTGGGCTGATGG TTATTTCCTGTCTGTGTGGGCTGATGGTCCTTCAATCATTGAAGTC... 1 dna:chromosome chromosome:GRCh38:1:1:2489564... 1.66E+08 + 2 69_ABL1_ex4_pos8C_G_rank3 0 TGCCTGTCTCTGTGGGCTGA GAGGAGACGTACAGCTGAAGGAAACAGGGAACAGCCTTCAGCCCAC... 10 40 50 29 1 11 AGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCA... TtCCTGTCTgTGTGGGCTGATGG TTATTTCCTGTCTGTGTGGGCTGATGGTCCTTCAATCATTGAAGTC... 1 dna:chromosome chromosome:GRCh38:1:1:2489564... 1.66E+08 + 2 72_ABL1_ex4_pos8C_T_rank3 0 TGCCTGTCTCTGTGGGCTGA GAGGAGACGTAAAGCTGAAGGAAACAGGGAACAGCCTTCAGCCCAC... 10 40 50 29 1 11 AGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCA... TtCCTGTCTgTGTGGGCTGATGG TTATTTCCTGTCTGTGTGGGCTGATGGTCCTTCAATCATTGAAGTC... 1 dna:chromosome chromosome:GRCh38:1:1:2489564... 1.66E+08 + 2 96_ABL1_ex4_pos11C_G_rank3 0 TGCCTGTCTCTGTGGGCTGA GAGGAGACCTAGAGCTGAAGGAAACAGGGAACAGCCTTCAGCCCAC... 10 40 50 32 1 8 AGCTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCA... TtCCTGTCTgTGTGGGCTGATGG TTATTTCCTGTCTGTGTGGGCTGATGGTCCTTCAATCATTGAAGTC... 1 dna:chromosome chromosome:GRCh38:1:1:2489564... 1.66E+08 + 2 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 11476_ABL1_ex9_pos100A_C_rank1 0 CAGGAATCCAGTATCTCAGA ATGGGTACGTTACCGTCTGAGATACTGG 10 18 28 10 1 8 GTTCCAGGAATCCAGTATCTCAGACGGTAAAGTACCCATCCCGGGG... gAGGAgcCCAGTATCTCAGATGG AGTGAGAGGAGCCCAGTATCTCAGATGGAAATGCAGAAATCACCTG... Y dna:chromosome chromosome:GRCh38:Y:2781480:5... 26339822 - 3 11479_ABL1_ex9_pos100A_G_rank1 0 CAGGAATCCAGTATCTCAGA GGGTACCTTACCGTCTGAGATACTGG 10 16 26 10 1 6 GTTCCAGGAATCCAGTATCTCAGACGGTAAAGTACCCATCCCGGGG... gAGGAgcCCAGTATCTCAGATGG AGTGAGAGGAGCCCAGTATCTCAGATGGAAATGCAGAAATCACCTG... Y dna:chromosome chromosome:GRCh38:Y:2781480:5... 26339822 - 3"},{"location":"2_Design/2_SynonymousPE/","title":"Synonymous PE","text":""},{"location":"2_Design/2_SynonymousPE/#introduce-synonymous-mutation-in-pegrna","title":"Introduce Synonymous Mutation in pegRNA","text":""},{"location":"2_Design/2_SynonymousPE/#additioal-edit-for-efficient-prime-editing","title":"Additioal edit for efficient prime editing","text":"<p>Prime editing efficiency is determined by various factors beyond RT-PBS. One well-known factor is the inhibitory effect by the mismatch repair (MMR) system. To prevent prime editing efficiency inhibition by MMR, a strategy of introducing additional mutations into pegRNA can be used (Chen et al., 2021, Cell). </p> <p>However, introducing additional mutations may not only reduce the impact of MMR but also decrease the activity of pegRNA. Moreover, if the target site for genome editing lies within the protein coding sequence (CDS) region, it is necessary to introduce synonymous (silent) mutations that do not affect protein function. Considering these factors, designing and selecting which mutations to introduce additionally into pegRNA can be a rather cumbersome task.</p>"},{"location":"2_Design/2_SynonymousPE/#synonymouspe-module-in-genet","title":"<code>SynonymousPE</code> module in GenET","text":"<p>GenET's SynonymousPE provides the functionality to easily design pegRNAs with additional mutations introduced. Specifically, it identifies possible synonymous mutations that align with the CDS, making it useful for biological research applications.</p> <p>Furthermore, SynonymousPE is directly compatible with DeepPrime, allowing for the creation of pegRNAs with synonymous mutations directly from pegRNAs designed in DeepPrime. </p> <pre><code>from genet.predict import DeepPrime\nfrom genet.design import SynonymousPE\n\n# DeepPrime pipeline\nseq_wt   = 'CTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCAGCTCTACGTCTCCTCCGAGAGCCGCTTCAACACCCTGGCCGAGTTGGTTCATCATCATTCAACGGTGGCCGACGGGC'\nseq_ed   = 'CTTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCAGCTCTACGTCTCCTCCAAGAGCCGCTTCAACACCCTGGCCGAGTTGGTTCATCATCATTCAACGGTGGCCGACGGGC'\n\npegrna = DeepPrime('ABL1_ex4_pos21G_A', seq_wt, seq_ed, edit_type='sub', edit_len=1)\n\npe2max_output = pegrna.predict(pe_system='PE2max', cell_type='HEK293T')\n\n\n# Select a pegRNA record that you want to add synonymous mutation \ndp_record = pe2max_output.iloc[9]\n\n# Setup SynonymousPE input parameters \nsynony_pegrna = SynonymousPE(dp_record, ref_seq=seq_wt,\n                            frame=0, cds_start=45, cds_end=121)\n\n# print selected RTT containing synonymous mutation\nprint(synony_pegrna.extension)\n</code></pre> <p>You can find more detailed information about the usage of DeepPrime in the documentation of the genet.predict module documentation. In the provided example, a synonymous mutation was introduced into one of the many designed pegRNAs. Since each pegRNA may have different regions and lengths for RTT, the types of additional mutations that can be introduced may also vary.</p> <p>It is recommended to first select appropriate pegRNAs based on DeepPrime scores and then further optimize them using SynonymousPE.</p>"},{"location":"2_Design/2_SynonymousPE/#synonymouspes-input-parameters","title":"SynonymousPE's input parameters","text":"<p><code>de_record</code>: pd.Series An object containing information about the pegRNA. When designed using DeepPrime, if you retrieve a specific index from the resulting DataFrame, you can use it directly.</p> <p><code>ref_seq</code>: str The DNA sequence information that serves as the target for the pegRNA. SynonymousPE assumes the presence of a CDS within this sequence and introduces synonymous mutations according to predefined rules. The genetic sequence used as the reference for frame, cds_start, and cds_end is defined below.  </p> <p><code>frame</code>: int This value represents the frame of the reference sequence (ref_seq). It is determined by the codon frame of the CDS and is expressed as 0, 1, or 2. For example, if the CDS sequence starts from the beginning of a codon (3bp), you would input frame as 0. It's crucial to input the correct frame, as an inaccurate frame could lead to synonymous mutations resulting in a completely different amino acid sequence.</p> <p></p> <p><code>cds_start</code>: int <code>ref_seq</code> Indicates the position where the CDS starts in the ref_seq.</p> <p><code>cds_end</code>: int <code>ref_seq</code> Indicates the position where the CDS ends in the ref_seq.</p> <p><code>adj_rha</code>: bool When a synonymous mutation occurs in the RHA of the RT template, the efficiency of prime editing may significantly decrease if the RHA becomes too short. As an alternative, you can artificially extend the length of the RT template. adj_rha is an option to specify whether to extend the length of the RT template by the same amount as the shortening of the RHA when it becomes too short (default: True). If adj_rha is set to False, regardless of where the synonymous mutation occurs, the length of the RT template remains the same as that of the original pegRNA.</p>"},{"location":"2_Design/2_SynonymousPE/#synonymouspe-input-examples","title":"<code>SynonymousPE</code> input examples","text":"<p>The information regarding the frame and CDS positioning in SynonymousPE can be somewhat complex to grasp at first use. </p>"},{"location":"2_Design/2_SynonymousPE/#example-1","title":"Example 1:","text":"<pre><code>from genet.design import SynonymousPE\n\n# pegRNA record &amp; ref_seq\ndp_record = dp_record\nref_seq   = 'CTCTACGTCTCCTCCGAGAGCCGCTTCAACACCCTGGCCGAGTTGGTTCATCATCATTCAACGGTGGCCGACGGGCTCATCACCACGCTCCATTATCCAGCCCCAAAGCGCAACAAGCCCA'\n\n# Setup SynonymousPE \nsynony_pegrna = SynonymousPE(dp_record, ref_seq=ref_seq, frame=0, cds_start=0, cds_end=121)\n</code></pre>"},{"location":"2_Design/2_SynonymousPE/#example-2","title":"Example 2:","text":"<pre><code>from genet.design import SynonymousPE\n\n# pegRNA record &amp; ref_seq\ndp_record = dp_record\nref_seq   = 'CTACGTCTCCTCCGAGAGCCGCTTCAACACCCTGGCCGAGTTGGTTCATCATCATTCAACGGTGGCCGACGGGCTCATCACCACGCTCCATTATCCAGCCCCAAAGCGCAACAAGCCCACT'\n\n# Setup SynonymousPE \nsynony_pegrna = SynonymousPE(dp_record, ref_seq=ref_seq, frame=2, cds_start=0, cds_end=121)\n</code></pre>"},{"location":"2_Design/2_SynonymousPE/#example-3","title":"Example 3:","text":"<pre><code>from genet.design import SynonymousPE\n\n# pegRNA record &amp; ref_seq\ndp_record = dp_record\nref_seq   = 'TTGCCTGTCTCTGTGGGCTGAAGGCTGTTCCCTGTTTCCTTCAGCTCTACGTCTCCTCCGAGAGCCGCTTCAACACCCTGGCCGAGTTGGTTCATCATCATTCAACGGTGGCCGACGGGCT'\n\n# Setup SynonymousPE \nsynony_pegrna = SynonymousPE(dp_record, ref_seq=ref_seq, frame=1, cds_start=44, cds_end=121)\n</code></pre>"},{"location":"2_Design/2_SynonymousPE/#synonymouspes-mutation-priority","title":"<code>SynonymousPE</code>s mutation Priority","text":"<p>When introducing a 1bp point mutation into the pegRNA RT template, there may be multiple synonymous mutations. <code>SynonymousPE</code> assigns priority scores to each possible mutation and selects the RT template with the highest priority mutation for additional incorporation, providing it as <code>.extension</code>. The criteria for determining the priority of <code>SynonymousPE</code> are as follows.</p> <ul> <li>Priority 1: If there is a synonymous mutation that eliminates the PAM (GG), it is assigned the highest priority.</li> <li>Priority 2: When introduced into the Left Homology Arm (LHA), mutations closer to the intended prime-edit position are assigned higher priority.</li> <li>Priority 3: When introduced into the Right Homology Arm (RHA), mutations closer to the intended prime-edit position are assigned higher priority.</li> </ul>"},{"location":"2_Design/2_SynonymousPE/#stack-introduction-of-synonymous-mutations","title":"<code>stack</code>: Introduction of synonymous mutations","text":"<p>This functionality allows for the insertion of multiple synonymous mutations into a single RT template. By default, <code>SynonymousPE</code> selects the highest priority mutation among those introducing only one synonymous mutation into the RT template and provides it as <code>.extension</code>. However, if you wish to introduce two or more synonymous mutations simultaneously, you can use the <code>.stack</code> method.</p> <pre><code>from genet.design import SynonymousPE\n\n# Create a SynonymousPE object\nsynony_pegrna = design.SynonymousPE(dp_record, ref_seq=seq_wt, frame=0)\n\n# Generate an RT template with up to three synonymous mutations introduced\nthree_syn = synony_pegrna.stack(num=3)\n</code></pre> <p><code>.stack</code> It incorporates possible synonymous mutations in order of assigned priority. When each synonymous mutation is introduced individually, there is no change in the amino acid sequence. However, when two mutations are introduced simultaneously, there may be a change in the amino acid sequence. In such cases, the process moves on to the next priority mutation.</p>"},{"location":"2_Design/2_SynonymousPE/#objects-available-for-retrieval-in-synonymouspe","title":"Objects Available for Retrieval in SynonymousPE","text":"<p>Below are the objects available for accessing key results.</p> Name Type Description <code>.extension</code> str Selected RT-PBS sequence containing recommanded synonymous mutation. <code>.synonymous</code> pd.DataFrame Table of available synonymous mutations and corresponding informations for given pegRNA. <code>.mutations</code> pd.DataFrame Table of all available additional mutations and corresponding informations for given pegRNA. <code>.rec</code> pd.Series Record of pegRNA from input. <p>\ub2e4\uc74c\uacfc \uac19\uc774 \uac12\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. </p> <pre><code>from genet.design import SynonymousPE\n\n# Create a SynonymousPE object\nsynony_pegrna = design.SynonymousPE(dp_record, ref_seq=seq_wt, frame=0)\n\n# Check for available synonymous mutations for introduction\nsynony_pegrna.synonymous\n</code></pre> <p>Results:</p> Codon_WT Codon_Mut Codon_MutPos Codon_RefStart Codon_RefEnd RTT_DNA_frame RTT_DNA_Strand AminoAcid_WT AminoAcid_Mut Silent_check Mut_pos Mut_refpos PAM_Mut Priority Edit_class RTT_DNA_Mut GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTCGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC 5 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 5 62 CG 1 PAM_edit CCGTCGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTAGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC 5 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 5 62 AG 2 PAM_edit CCGTAGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTTGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC 5 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 5 62 TG 2 PAM_edit CCGTTGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAAGAGCCGCAGTCAGATCCTAGCGTCGAGCCC 8 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 8 65 GG 15 RHA_edit CCGTGGAAGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAACCGCAGTCAGATCCTAGCGTCGAGCCC 11 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 11 68 GG 18 RHA_edit CCGTGGAGGAACCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCCCAGTCAGATCCTAGCGTCGAGCCC 14 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 14 71 GG 20 RHA_edit CCGTGGAGGAGCCCCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCACAGTCAGATCCTAGCGTCGAGCCC 14 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 14 71 GG 21 RHA_edit CCGTGGAGGAGCCACAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCTCAGTCAGATCCTAGCGTCGAGCCC 14 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 14 71 GG 21 RHA_edit CCGTGGAGGAGCCTCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAATCAGATCCTAGCGTCGAGCCC 17 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 17 74 GG 24 RHA_edit CCGTGGAGGAGCCGCAATCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCTGATCCTAGCGTCGAGCCC 20 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 20 77 GG 26 RHA_edit CCGTGGAGGAGCCGCAGTCTGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCCGATCCTAGCGTCGAGCCC 20 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 20 77 GG 27 RHA_edit CCGTGGAGGAGCCGCAGTCCGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCGGATCCTAGCGTCGAGCCC 20 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 20 77 GG 27 RHA_edit CCGTGGAGGAGCCGCAGTCGGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGACCCTAGCGTCGAGCCC 23 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 23 80 GG 30 RHA_edit CCGTGGAGGAGCCGCAGTCAGACCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCAAGCGTCGAGCCC 26 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 26 83 GG 32 RHA_edit CCGTGGAGGAGCCGCAGTCAGATCCAAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCGAGCGTCGAGCCC 26 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 26 83 GG 33 RHA_edit CCGTGGAGGAGCCGCAGTCAGATCCGAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCCAGCGTCGAGCCC 26 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 26 83 GG 33 RHA_edit CCGTGGAGGAGCCGCAGTCAGATCCCAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGTGTCGAGCCC 29 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 29 86 GG 36 RHA_edit CCGTGGAGGAGCCGCAGTCAGATCCTAGTGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTGGAGCCC 32 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 32 89 GG 38 RHA_edit CCGTGGAGGAGCCGCAGTCAGATCCTAGCGTGGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTAGAGCCC 32 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 32 89 GG 39 RHA_edit CCGTGGAGGAGCCGCAGTCAGATCCTAGCGTAGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTTGAGCCC 32 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 32 89 GG 39 RHA_edit CCGTGGAGGAGCCGCAGTCAGATCCTAGCGTTGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAACCC 35 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 35 92 GG 42 RHA_edit CCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAACCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCG 38 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 38 95 GG 44 RHA_edit CCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCG GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCA 38 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 38 95 GG 45 RHA_edit CCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCA GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCC GCCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCT 38 58 97 1 + VEEPQSDPSVEP VEEPQSDPSVEP TRUE 38 95 GG 45 RHA_edit CCGTGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCT <p>Below are the objects containing parameters and other detailed information used for design within the code. </p> Name Type Description <code>.sID</code> str Sample ID from pegRNA record. <code>.rtpbs_dna</code> str Reverse complementary DNA sequence of RT-PBS. <code>.pbs_dna</code> str Reverse complementary DNA sequence of PBS. <code>.rtt_dna</code> str Reverse complementary DNA sequence of RT template <code>.rtt_len</code> int Length of RT template <code>.wt_seq</code> str WT target sequence (74nt) <code>.ed_seq</code> str Prime-edited target sequence (74nt) <code>.edit_pos</code> int Position of intended prime editing. Start from nick site. <code>.ref_seq</code> str Reference target sequence from input. <code>.frame</code> int Frame of coding sequence (CDS) from input. <code>.cds_start</code> int Start position of CDS <code>.cds_end</code> int End position of CDS <code>.strand</code> str Strand of pegRNA. It should '+' or '-'. <code>.rtt_frame</code> int Frame of RT template. <code>.codon_le</code> int Length of left end (LE) of codon sequence. <code>.codon_re</code> int Length of right end (RE) of codon sequence. <code>.codon_RTT</code> str Codon sequence with RT template. <p>You can check the values as follows. </p> <pre><code>from genet.design import SynonymousPE\n\nsynony_pegrna = design.SynonymousPE(dp_record, ref_seq=seq_wt, frame=0)\nsynony_pegrna.ref_seq\n</code></pre>"},{"location":"3_Database/1_database_intro/","title":"Genet database module","text":""},{"location":"3_Database/1_database_intro/#genome-resources-and-annotations","title":"Genome resources and annotations","text":"<p>The genome information of many organisms, including humans, is publicly available for research purposes in databases such as NCBI and Ensembl. Each database provides various methods to access and utilize the data through web pages or servers, but the abundance of commands and resources can make it challenging to use. Especially when dealing with large-scale data, programming-based data analysis is necessary, which can be daunting for novice bioinformaticians like myself.</p> <p>Recently, most bioinformatics and data science tasks are conducted using Python. However, there hasn't been a satisfactory development of Python packages or pipelines for working with genome databases. The excellent <code>Biopython</code> library, developed by talented developers, supports NCBI's <code>Entrez</code>, allowing us to access NCBI's genome resources using Python scripts. However, <code>Entrez</code> has limitations in terms of speed because it requires communication with the server for each record.</p>"},{"location":"3_Database/1_database_intro/#genet-for-using-database-resources","title":"GenET for using database resources","text":"<p><code>genmet.database</code> module</p>"},{"location":"3_Database/2_Genome_resource_background/","title":"Backgrounds","text":"<p>To utilize genome resources effectively, there are foundational concepts one must understand. Here, we introduce the minimum knowledge required to utilize the  <code>genet.database</code></p>"},{"location":"3_Database/2_Genome_resource_background/#1-databases","title":"1. Databases","text":"<p>Genome resource\ub97c \uc81c\uacf5\ud558\ub294 database\ub294 \uc5ec\ub7ec \uac1c\uac00 \uc874\uc7ac\ud55c\ub2e4. \uadf8 \uc911 \ub300\ud45c\uc801\uc73c\ub85c \uba87 \uac1c\ub97c \uc18c\uac1c\ud55c\ub2e4. </p> <ul> <li>NCBI: \ubbf8\uad6d \uc815\ubd80 \uae30\uad00 \uc911 \ud558\ub098\ub85c, \uc138\uacc4\uc5d0\uc11c \uac00\uc7a5 \ud070 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \uacf3</li> <li>Ensembl: \uc720\ub7fd\uc5d0\uc11c \ub9cc\ub4e0 database</li> <li>UCSC: \uce98\ub9ac\ud3ec\ub2c8\uc544 \uc0b0\ud0c0\ud06c\ub8e8\uc988 \ub300\ud559\uc5d0\uc11c \ub9cc\ub4e0 database. \ub300\ud559\uc5d0\uc11c \ub9cc\ub4e0 \uac83 \uce58\uace4 \uaddc\ubaa8\uac00 \ub9e4\uc6b0 \ud06c\ub2e4. </li> </ul> <p>\uc544\ub9c8 genomic data\ub97c \ub2e4\ub8e8\ub294 \uc5f0\uad6c\uc790\ub4e4\uc774\ub77c\uba74 \uc704 3\uac1c\uc758 database\ub294 \uc5b4\ub514\uc120\uac00 \ub4e4\uc5b4\ubd24\uc744 \uac00\ub2a5\uc131\uc774 \ub192\ub2e4. <code>genet.database</code>\uc5d0\uc11c\ub294 NCBI\ub97c \uae30\ubcf8 database\ub85c \ucc38\uc870\ud558\uc5ec \ub370\uc774\ud130\ub97c \uac00\uc838\uc628\ub2e4. \uac00\uc7a5 \uc720\uba85\ud558\uae30\ub3c4 \ud558\uace0, \ubb34\uc5c7\ubcf4\ub2e4 \uac1c\ubc1c\uc790\uc778 \ub0b4\uac00 \uac00\uc7a5 \uc775\uc219\ud55c DB\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. </p>"},{"location":"3_Database/2_Genome_resource_background/#2-reference-genome","title":"2. Reference genome","text":"<p>Human genome project\uc640 \uadf8 \uc774\ud6c4 \uafb8\uc900\ud55c \uc5f0\uad6c\uc758 \uacb0\uacfc\ub85c \uc6b0\ub9ac\ub294 human\uc758 reference genome\uc744 \uc5bb\uc5b4\ub0c8\ub2e4. \uc774\ub294 \ud604\uc7ac \uc6b0\ub9ac\uac00 \ud754\ud788 \uc0ac\uc6a9\ud558\ub294 <code>GRCh38</code> (Genome Reference Consortium Human Build 38, also known as hg38)\ub85c \uacf5\uac1c\ub418\uc5b4 \uc788\ub2e4. </p> <p>\uc778\uac04 \ubfd0\ub9cc \uc544\ub2c8\ub77c \ub2e4\ub978 \uc0dd\ubb3c\ub4e4 \ub610\ud55c reference genome\uc774 \uc874\uc7ac\ud55c\ub2e4. \uc950, \ub3fc\uc9c0, \uac1c\uc640 \uac19\uc740 \ud3ec\uc720\ub958\ub294 \ubb3c\ub860\uc774\uace0, \uc2dd\ubb3c, \ubc15\ud14c\ub9ac\uc544, \uadf8\ub9ac\uace0 \ubc14\uc774\ub7ec\uc2a4\uc5d0 \uc774\ub974\uae30\uae4c\uc9c0 \ubd84\ub958\uc0c1 \ubaa8\ub4e0 \uc885\ub958\uc758 \uc0dd\ubb3c\ub4e4\uc5d0 \ub300\ud574 reference genome\uc774 \uc874\uc7ac\ud560 \uc218 \uc788\ub2e4. 2023\ub144 12\uc6d4 \uae30\uc900, NCBI\uc5d0\ub294 300\ub9cc \uc885 \uc774\uc0c1\uc758 reference genome\uc774 \ub4f1\ub85d\ub418\uc5b4 \uc788\uc73c\uba70, \uc774\ub294 \uafb8\uc900\ud788 \ub298\uc5b4\ub098\uace0 \uc788\ub2e4. </p> <p>\uc6b0\ub9ac \uc778\uac04\ub3c4 \uac1c\uac1c\uc778\uc774 \uc870\uae08\uc529 \ub2e4\ub978 genomic sequence\ub97c \uac00\uc9c0\uace0 \uc788\uc9c0\ub9cc \uc5f0\uad6c\uc5d0\uc11c\ub294 reference genome\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\ucc98\ub7fc, \ub2e4\ub978 \uc885\uc5d0 \ub300\ud55c \uc5f0\uad6c\ub97c \ud560 \ub54c\uc5d0\ub3c4 \ub300\ud45c\uc801\uc778 reference genome\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uac00 \ub9ce\ub2e4. </p>"},{"location":"3_Database/2_Genome_resource_background/#3-annotations","title":"3. Annotations","text":"<p>\ub2e8\uc21c\ud788 \uc138\ud3ec\uc5d0\uc11c genomic DNA\ub97c \ubf51\uc544\uc11c sequencing\uc744 \ud558\uba74 ATGC\uc758 \uc11c\uc5f4 \uc815\ubcf4\ub9cc \uc54c \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc11c\uc5f4\uc5d0 \ub2f4\uae34 \uc758\ubbf8\uac00 \ubb34\uc5c7\uc778\uc9c0\ub294 \uc5f0\uad6c\uc790\ub4e4\uc774 \ubd84\uc11d\ud558\uace0 \ubd84\ub958\ud558\ub294 \uc791\uc5c5\uc774 \ud544\uc694\ud558\ub2e4. \uc5b4\ub5a4 \uc601\uc5ed\uc758 \uc720\uc804\uc790 \uc11c\uc5f4\uc774 \uc5b4\ub5a4 \ub2e8\ubc31\uc9c8\uc744 \ucf54\ub529\ud558\uace0 \uc788\ub294\uc9c0 \ub4f1\uc758 \uc0dd\ubb3c\ud559\uc801 \uae30\ub2a5\uc744 \uc815\ub9ac\ud574\ub193\uc740 \uac83\uc744 annotation\uc774\ub77c\uace0 \ud55c\ub2e4.</p> <p>\ub300\ud45c\uc801\uc778 \uc815\ubcf4\ub294 \uc544\ub798\uc640 \uac19\ub2e4 (\ud45c\ub85c \ucd94\uac00 \uc815\ub9ac \ud544\uc694!).</p> <ul> <li>Gene: </li> <li>Exon:</li> <li>CDS:</li> <li>Transcript:</li> </ul>"},{"location":"3_Database/2_Genome_resource_background/#4-feature-file","title":"4. Feature file ()","text":"<p>Annotation \uc815\ubcf4\uac00 \ub2f4\uaca8\uc788\ub294 feature file (GFF3 \ub4f1)\uc758 \ud30c\uc77c \uc758\ubbf8\uc640 \uae30\ubcf8\uc801\uc778 \uad6c\uc870\ub97c \uc124\uba85\ud55c\ub2e4. </p>"},{"location":"3_Database/2_Genome_resource_background/#5-genbank-file","title":"5. GenBank file","text":"<p>GenBank \ud30c\uc77c\uc758 \uc758\ubbf8\uc640 \uae30\ubcf8\uc801\uc778 \uad6c\uc870\ub97c \uc124\uba85\ud55c\ub2e4.</p>"},{"location":"3_Database/3_Metadata%20from%20databases/","title":"Metadata","text":""},{"location":"3_Database/3_Metadata%20from%20databases/#get-genomic-data-from-well-known-databases","title":"Get genomic data from well known databases","text":"<p>NCBI\uc640 \uac19\uc740 database\uc5d0\ub294 \uc218 \ub9cc\uac00\uc9c0 \uc774\uc0c1\uc758 \uc885\uc5d0\uc11c\uc758 genomic sequence data\uc640 annodation \uc815\ubcf4\uac00 \uc815\ub9ac\ub418\uc5b4 \uc788\ub2e4. GenET\uc740 \uc774\ub7f0 database\uc5d0\uc11c \uc6d0\ud558\ub294 \uc815\ubcf4\ub97c \uc190 \uc27d\uac8c \ucc3e\uc544\uc624\uace0, \uc6d0\ud558\ub294 genome editing\uc744 \uc704\ud55c \uc815\ubcf4\ub85c \ubcc0\ud658\ud560 \uc218 \uc788\ub2e4. </p>"},{"location":"3_Database/3_Metadata%20from%20databases/#database-metadata","title":"Database\uc758 metadata","text":"<p><code>genet.database</code> module\uc740 \uac01 database\uc5d0\uc11c \uc8fc\uc694 \uc815\ubcf4\uac00 \uc815\ub9ac\ub418\uc5b4 \uc788\ub294 metadata file\uc744 \uae30\ubc18\uc73c\ub85c \uc6d0\ud558\ub294 \ud30c\uc77c\uc744 \ucc3e\uace0, \uc11c\ubc84\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\ub294\ub2e4. <code>NCBI</code> \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud558\uba74 \uc124\uce58\ub41c metadata file\uc744 \ucc3e\uace0, \ub9cc\uc57d \uc5c6\ub2e4\uba74 \uc790\ub3d9\uc73c\ub85c FTP \uc11c\ubc84\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\ub294\ub2e4. </p> <p>\ub9cc\uc57d metadata file\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc558\uac70\ub098, \uc774\ubbf8 \uc774\uc804\uc5d0 <code>genet.database</code> module\uc744 \uc0ac\uc6a9\ud574\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc558\ub2e4\uba74, <code>.meta</code> \ubcc0\uc218\ub97c \ud638\ucd9c\ud574\uc11c \uc9c0\uae08 \ucc38\uc870\ud558\ub294 \ub370\uc774\ud130 summary\ub97c \ubcfc \uc218 \uc788\ub2e4. 2023\ub144 12\uc6d4 8\uc77c \uae30\uc900, 344258\uac1c\uc758 genome data\uac00 \ub4e4\uc5b4\uc788\ub2e4. </p> <pre><code>ncbi = db.NCBI()\nmeta = ncbi.meta\n\n&gt;&gt;&gt; meta.head(4)\n</code></pre> #assembly_accession bioproject biosample wgs_master refseq_category taxid species_taxid organism_name infraspecific_name isolate ... replicon_count scaffold_count contig_count annotation_provider annotation_name annotation_date total_gene_count protein_coding_gene_count non_coding_gene_count pubmed_id GCF_003969965.1 PRJNA224116 SAMN09788411 RXWR00000000.1 na 287 287 Pseudomonas aeruginosa strain=MRSN11281 na ... 0 48 48 NCBI RefSeq NCBI Prokaryotic Genome Annotation Pipeline (P... ####### 5925 5797 65 na GCF_003970495.1 PRJNA224116 SAMN05978001 RXWW00000000.1 na 45972 45972 Staphylococcus pasteuri strain=DSM 10656 na ... 0 93 93 NCBI RefSeq NCBI Prokaryotic Genome Annotation Pipeline (P... ####### 2456 2341 68 na GCF_003970195.1 PRJNA224116 SAMN10589305 RXYG00000000.1 na 2496849 2496849 Pseudomonas sp. C 49-2 strain=C 49-2 na ... 0 41 41 NCBI RefSeq NCBI Prokaryotic Genome Annotation Pipeline (P... ####### 5896 5771 62 na GCF_003968025.1 PRJNA224116 SAMN09788318 RXTA00000000.1 na 287 287 Pseudomonas aeruginosa strain=MRSN8915 na ... 0 329 329 NCBI RefSeq NCBI Prokaryotic Genome Annotation Pipeline (P... ####### 6851 6597 59 na <p>\ub9cc\uc57d \ub2e4\ub978 pipeline\uc5d0 metadata\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uace0 \uc2f6\ub2e4\uba74, \uc544\ub798\uc640 \uac19\uc774 \uc9c1\uc811 \uc9c0\uc815\ub41c \uacbd\ub85c\uc5d0 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc744 \uc218 \uc788\ub2e4. \ub9cc\uc57d <code>download_path</code>\ub97c \ub530\ub85c \uc9c0\uc815\ud574\uc8fc\uc9c0 \uc54a\ub294\ub2e4\uba74, genet.database.metadata \uc544\ub798\uc5d0 \uc790\ub3d9\uc73c\ub85c \uc800\uc7a5\ub41c\ub2e4. \ub610\ud55c <code>convert</code>\uac00 <code>True</code> (default) \ub77c\uba74, \ub2e4\uc6b4\ub85c\ub4dc\ud55c metadata file (.txt)\ub97c parquet \ud30c\uc77c\ub85c \ubcc0\ud658\ud574\uc900\ub2e4. Parquet \ud615\uc2dd\uc740 \uc6a9\ub7c9\uacfc \ub370\uc774\ud130 \uc77d\uae30/\uc4f0\uae30 \uc18d\ub3c4\uc5d0 \uc720\ub9ac\ud558\ubbc0\ub85c convert \ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ud55c\ub2e4.  <pre><code>from genet.database import NCBI\n\nncbi = NCBI()\nncbi.download(download_path='YOUR_PATH', convert=True)\n</code></pre></p> <p>\uac01 database\uc758 metadata\ub294 \uc218\uc2dc\ub85c \uc5c5\ub370\uc774\ud2b8 \ub41c\ub2e4. \ub530\ub77c\uc11c \ub108\ubb34 \uc624\ub798\ub41c metadata\ub97c \uc774\uc6a9\ud574\uc11c \ucd5c\uc2e0 genomic data\ub97c \ucc3e\uc73c\ub824 \ud558\uba74 \uc6d0\ud558\ub294 \uc815\ubcf4\ub97c \uc5bb\uc744 \uc218 \uc5c6\uc744 \uc218\ub3c4 \uc788\ub2e4. \ud604\uc7ac \uac00\uc0c1\ud658\uacbd\uc5d0\uc11c \uc124\uce58\ub41c <code>genet</code>\uc774 \ucc38\uc870\ud558\ub294 database\uc758 metadaata \ubc84\uc804 (created data)\uc744 \ud655\uc778\ud558\ub824\uba74, \uc544\ub798\uc758 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud558\uba74 \ub41c\ub2e4.</p> <pre><code>from genet.database import config\n\ncfg = config.NCBIconfig()\ncfg.version\n</code></pre> <p>\ub9cc\uc57d \ucd5c\uc2e0 metadata\ub97c \uc0c8\ub85c \ub2e4\uc6b4 \ubc1b\uc544\uc11c \ucc38\uc870\ud558\ub294 \ub370\uc774\ud130\ub97c \ucd5c\uc2e0 \ubc84\uc804\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ud558\uace0 \uc2f6\ub2e4\uba74, <code>update()</code>\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. </p> <pre><code>from genet.database import NCBI\n\nncbi = NCBI()\nncbi.update()\n</code></pre>"},{"location":"3_Database/3_Metadata%20from%20databases/#get-genome-data-from-ncbi-database","title":"Get genome data from NCBI database","text":"<p>\ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0\ub294 \uc5f0\uad6c\ud558\uace0\uc790 \ud558\ub294 \uc885(e.g. Homo sapiens)\uc774 \uc815\ud574\uc838 \uc788\ub294 \uacbd\uc6b0\uac00 \ub9ce\ub2e4. \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0\ub294 <code>GetGenome</code>\uc744 \uc774\uc6a9\ud574\uc11c \ud2b9\uc815 \uc885\uc5d0 \ub300\ud55c reference genome\uc744 \uac00\uc838\uc624\uace0, \uc774\uc5d0 \ub300\ud55c data parsing\uc744 \uc9c4\ud589\ud560 \uc218 \uc788\ub2e4. \uc608\uc2dc\ub85c, \uc544\ub798\uc640 \uac19\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. </p> <pre><code>from genet.database import GetGenome\n\ngenome = GetGenome('Homo sapiens')\n\n&gt;&gt;&gt; genome.info # metadata \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ubcc0\uc218, pd.Series\n</code></pre> Index Data #assembly_accession GCF_000001405.40 bioproject PRJNA168 biosample na wgs_master na refseq_category reference genome taxid 9606 species_taxid 9606 organism_name Homo sapiens infraspecific_name na isolate na version_status latest assembly_level Chromosome release_type Patch genome_rep Full seq_rel_date 2022/02/03 asm_name GRCh38.p14 asm_submitter Genome Reference Consortium gbrs_paired_asm GCA_000001405.29 paired_asm_comp different ftp_path https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/0... excluded_from_refseq na \u2026 total_gene_count 59652 protein_coding_gene_count 20080 non_coding_gene_count 22158 pubmed_id 10508508;11780052;7219534;10830953;15496913;12\u2026 <p>'Homo sapiens'\ub294 \ud604\uc7ac 'GCF_000001405.40' (\ud754\ud788 GRCh38\ub77c\uace0 \uc54c\ub824\uc838 \uc788\ub294 assembly)\uac00 reference genome\uc73c\ub85c \uc9c0\uc815\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0, <code>GetGenome</code>\uc5d0\uc11c\ub294 \uc790\ub3d9\uc73c\ub85c \uc774 \ub370\uc774\ud130\ub97c \uac00\uc838\uc628\ub2e4.  \ud558\uc9c0\ub9cc \ub9cc\uc57d \ucd5c\uadfc \uc0c8\ub85c \ub4f1\ub85d\ub41c 'GCF_009914755.1' (T2T-CHM13)\ub97c \uc774\uc6a9\ud558\uace0 \uc2f6\ub2e4\uba74, <code>GetGenome</code>\uc5d0\uc11c <code>category</code>\ub97c '#assembly_accession' (GCF_XXXXXXXXX.XX) \ub85c \ubcc0\uacbd\ud558\uace0 NCBI\uc5d0 \ub4f1\ub85d\ub41c ID\ub97c \ucc3e\uc544\uc11c \uac80\uc0c9\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc544\ub798\uc640 \uac19\uc774 T2T-CHM13\ub97c \uac80\uc0c9\ud574\uc11c \uc815\ubcf4\ub97c \uac00\uc838\uc62c \uc218 \uc788\ub2e4. </p> <pre><code>from genet.database import GetGenome\n\ngenome = GetGenome(id='GCF_009914755.1', category='#assembly_accession')\n\n&gt;&gt;&gt; genome.info # metadata \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ubcc0\uc218, pd.Series\n</code></pre> Index Data #assembly_accession GCF_009914755.1 bioproject PRJNA807723 biosample SAMN03255769 wgs_master na refseq_category na taxid 9606 species_taxid 9606 organism_name Homo sapiens infraspecific_name na isolate na version_status latest assembly_level Complete Genome release_type Major genome_rep Full seq_rel_date 2022/01/24 asm_name T2T-CHM13v2.0 asm_submitter T2T Consortium gbrs_paired_asm GCA_009914755.4 paired_asm_comp different ftp_path https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/0... excluded_from_refseq na \u2026 total_gene_count 58360 protein_coding_gene_count 20077 non_coding_gene_count 20992 pubmed_id 35357919 <p>\ub9cc\uc57d reference genome\uc774 \uc9c0\uc815\ub418\uc9c0 \uc54a\uc740 \uc885\uc774\ub77c\uba74, 'organism_name'\uc73c\ub85c \uac80\uc0c9\ud560 \uc218 \uc5c6\ub2e4. \uc608\ub97c \ub4e4\uc5b4, 'Pseudomonas aeruginosa'\ub77c\ub294 \uc885\uc740 reference\uac00 \uc9c0\uc815\ub41c \uac83\uc774 \uc5c6\uace0, \ub4f1\ub85d\ub41c assembly data\ub9cc 100\uac1c \uc774\uc0c1\uc774 \uc788\ub2e4. </p> <pre><code>genome = GetGenome('Pseudomonas aeruginosa')\n&gt;&gt;&gt; genome.info\n\n# ValueError occured (2023.12.9. \uae30\uc900)\nValueError: [Info] There are no defined reference genome. \n                    Please use \"#assembly_accession\" as category.\n                    You should select specific genome depending on your research purpose.\n                    Available accessions: ['GCF_003969965.1', 'GCF_003968025.1', ... ]\n</code></pre> <p>\uc774 \ub54c\uc5d0\ub294 \uc790\uc2e0\uc774 \ubcf4\uace0\uc790 \ud558\ub294 \ub370\uc774\ud130\uc758 \uc815\ud655\ud55c '#assembly_accession'\uc744 \uc9c0\uc815\ud574\uc11c \uac80\uc0c9\ud574\uc57c \ud55c\ub2e4. </p>"},{"location":"3_Database/4_Download_files/","title":"Download","text":""},{"location":"3_Database/4_Download_files/#download-genbank-or-feature-files","title":"Download Genbank or feature files","text":"<p><code>GetGenome</code>\uc73c\ub85c \uc6d0\ud558\ub294 genome data\uc5d0 \ub370\uc774\ud130 \uc815\ubcf4\ub97c \uac00\uc838\uc654\ub2e4\uba74, NCBI\uc5d0 \ud574\ub2f9 genome data\uc5d0 \ub300\ud574 \uc811\uadfc\ud560 \uc218 \uc788\ub294 \ub370\uc774\ud130\ub4e4\uc744 \ud655\uc778\ud558\uace0, \ub0b4\uac00 \uc6d0\ud558\ub294 \uacbd\ub85c\uc5d0 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc744 \uc218 \uc788\ub2e4. \uc6b0\uc120 \uc5b4\ub5a4 \ud30c\uc77c\ub4e4\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc744 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74, <code>content()</code> method\ub97c \ud65c\uc6a9\ud574\ubcf4\uc790.</p> <pre><code>from genet.database import GetGenome\n\ngenome = GetGenome('Homo sapiens')\nlist_contents = genome.contents()\n\n&gt;&gt;&gt; list_contents\n\n['README.txt',\n 'Annotation_comparison',\n 'GCF_000001405.40_GRCh38.p14_assembly_structure',\n 'GCF_000001405.40-RS_2023_10_annotation_report.xml',\n 'annotation_hashes.txt',\n 'RefSeq_transcripts_alignments',\n 'GCF_000001405.40_GRCh38.p14_assembly_regions.txt',\n 'GCF_000001405.40_GRCh38.p14_assembly_report.txt',\n 'GCF_000001405.40_GRCh38.p14_assembly_stats.txt',\n 'GCF_000001405.40_GRCh38.p14_cds_from_genomic.fna.gz',\n 'GCF_000001405.40_GRCh38.p14_feature_count.txt.gz',\n 'GCF_000001405.40_GRCh38.p14_feature_table.txt.gz',\n 'GCF_000001405.40_GRCh38.p14_genomic.fna.gz',\n 'GCF_000001405.40_GRCh38.p14_genomic.gbff.gz',\n 'GCF_000001405.40_GRCh38.p14_genomic.gff.gz',\n 'GCF_000001405.40_GRCh38.p14_genomic.gtf.gz',\n 'GCF_000001405.40_GRCh38.p14_genomic_gaps.txt.gz',\n 'GCF_000001405.40_GRCh38.p14_protein.faa.gz',\n 'GCF_000001405.40_GRCh38.p14_protein.gpff.gz',\n 'GCF_000001405.40_GRCh38.p14_pseudo_without_product.fna.gz',\n 'GCF_000001405.40_GRCh38.p14_rm.out.gz',\n 'GCF_000001405.40_GRCh38.p14_rm.run',\n 'GCF_000001405.40_GRCh38.p14_rna.fna.gz',\n 'GCF_000001405.40_GRCh38.p14_rna.gbff.gz',\n 'GCF_000001405.40_GRCh38.p14_rna_from_genomic.fna.gz',\n 'GCF_000001405.40_GRCh38.p14_translated_cds.faa.gz',\n 'README_GCF_000001405.40-RS_2023_10',\n 'assembly_status.txt',\n 'md5checksums.txt',\n 'GRCh38_major_release_seqs_for_alignment_pipelines']\n</code></pre> <p>\uc704\uc5d0 \uc788\ub294 \ud30c\uc77c\ub4e4\uc774 \uc774 genome\uc5d0 \ub300\ud574\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc744 \uc218 \uc788\ub294 \ud30c\uc77c\ub4e4\uc774\ub2e4. \uac01 \ud30c\uc77c\ub4e4\uc758 \uc790\uc138\ud55c \uc124\uba85\uc5d0 \ub300\ud574\uc11c\ub294 NCBI\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uacf5\uc2dd \uc124\uba85\uc11c\ub098, \uc704 \ud30c\uc77c\uc5d0\uc11c <code>README.txt</code>\ub97c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc544\uc11c \ud655\uc778\ud574\ubcf4\uc790. \uc704 \ud30c\uc77c \uc911 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uace0 \uc2f6\uc740 \ud30c\uc77c\uc774 \uc788\ub2e4\uba74, \uc9c1\uc811 FTP \uc11c\ubc84\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc544\ub3c4 \ub418\uc9c0\ub9cc, <code>download()</code> method\ub97c \uc0ac\uc6a9\ud574\uc11c \uac04\ud3b8\ud558\uac8c \uc6d0\ud558\ub294 \uacbd\ub85c\uc5d0 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc744 \uc218 \uc788\ub2e4.</p> <pre><code>genome.download(target_file='README.txt', path='./')\n</code></pre> <p><code>download()</code>\uc5d0\uc11c <code>path</code>\ub294 \ud604\uc7ac \uc791\uc5c5 \uacbd\ub85c (current working directory)\uac00 \uae30\ubcf8\uac12\uc73c\ub85c \uc124\uc815\ub418\uc5b4 \uc788\ub2e4. \ub530\ub77c\uc11c \ud30c\uc77c \uc774\ub984\ub9cc \uc815\ud655\ud788 \uc785\ub825\ud558\uba74, \uc9c0\uae08 <code>cwd</code>\uc5d0 \ub611\uac19\uc740 \uc774\ub984\uc758 \ud30c\uc77c\uc774 \ub2e4\uc6b4\ub85c\ub4dc \ub41c\ub2e4. </p>"},{"location":"4_Analysis/1_analysis_intro/","title":"Genet Analysis module","text":"<p>coming soon</p>"},{"location":"5_Utils/1_utils_intro/","title":"Genet Utils module","text":"<p>Comming soon</p>"},{"location":"5_Utils/2_download_files/","title":"Download from server","text":"<p>Comming soon</p>"},{"location":"6_Application_notes/Genome-wide_KO_library/","title":"Genome-wide KO lIbrary","text":"<p>Genome-wide knockout (KO) screening using CRISPR Cas9 is widely utilized in various research fields. Its advantage lies in the ability to observe the cellular properties, morphology, and functions when a gene loses its function in a single experiment. Consequently, well-known genome-wide KO libraries such as GecKO and Brunello are already available for purchase on AddGene.</p> <p>However, both of the mentioned libraries are designed based on the human reference genome. If you wish to conduct experiments in cells derived from a different species, you would need to create a new library. For instance, during the COVID-19 era, Vero cell lines derived from monkeys were widely used for studying SARS-CoV-2. As Vero cells are not of human origin, libraries like Brunello cannot be used.</p> <p>To create a new library, you need to design a guide RNA (gRNA) showing high activity for each of the 20,000 genes. Although models like DeepSpCas9 are available as web tools, obtaining results for all 20,000 genes may be challenging. However, using GenET's 'database' and 'predict' modules, you can easily create your own genome-wide KO library.</p>"},{"location":"6_Application_notes/Genome-wide_KO_library/#1-parsing-gene-records","title":"1. Parsing gene records","text":"<p>By utilizing the 'GetGene' class in GenET's 'database,' you can effortlessly retrieve NCBI information for your desired gene by simply entering the gene symbol.</p> <pre><code>from genet.database import GetGene\n\nbrca1 = GetGene('BRCA1')\nrecords = brca1.seq_record\n</code></pre> <p>When examining the contents within the <code>seq_record</code>, you can observe information related to the BRCA1 gene, including its sequence and the position of each region (exon, intron, UTR, etc.). As we need to design gRNA within exons for knockout purposes, we should extract only the exon information. Using the <code>.exon()</code> method will retrieve and return exon information as a list.</p> <pre><code>list_exon = brca1.exons()\n</code></pre> <p>Inside the <code>list_exon</code>, there are sequence features of each exon of BRCA1. Extracting information from these features and using it as input for gRNA design allows the creation of all possible gRNAs for each exon. <pre><code>&gt;&gt;&gt; list_exon\n\n[SeqFeature(FeatureLocation(ExactPosition(92500), ExactPosition(92713), strand=1), type='exon'),\n SeqFeature(FeatureLocation(ExactPosition(93868), ExactPosition(93967), strand=1), type='exon'),\n SeqFeature(FeatureLocation(ExactPosition(102204), ExactPosition(102258), strand=1), type='exon'),\n SeqFeature(FeatureLocation(ExactPosition(111450), ExactPosition(111528), strand=1), type='exon'),\n SeqFeature(FeatureLocation(ExactPosition(113027), ExactPosition(113116), strand=1), type='exon'),\n......\n]\n</code></pre></p> <p>For example, you can easily retrieve the first exon, and within it, obtain the sequence along with the start and end positions of that exon within the BRCA1 gene.</p> <p><pre><code># Retrieve the entire genomic sequence of BRCA1\nbrca1_seq = str(brca1.seq_record.seq)\n\n# Obtain information for the first exon among multiple exons\nexon_1  = list_exon[0]\n\n# Get the start and end positions of Exon 1\nstart = exon_1.location.start\nend   = exon_1.location.end\n\n# Select only the Exon 1 sequence from the BRCA1 genomic sequence\nbrca1_exon1_seq = brca1_seq[start:end]\n</code></pre> By repeating this process for every exon, you can easily obtain the sequences of all exons of the BRCA1 gene.</p> <pre><code>from genet.database import GetGene\n\nbrca1     = GetGene('BRCA1')\nbrca1_seq = str(brca1.seq_record.seq)\n\nlist_exon   = brca1.exons()\nlist_ex_seq = []\n\nfor ex in list_exon:\n    start = ex.location.start\n    end   = ex.location.end\n\n    exon_seq = brca1_seq[start:end]\n\n    list_ex_seq.append(exon_seq)\n</code></pre> <p>Now, within <code>list_ex_seq</code>, you have the information for each exon sequence of BRCA1.</p>"},{"location":"6_Application_notes/Genome-wide_KO_library/#2-predict-spcas9-activities","title":"2. Predict SpCas9 activities","text":"<p>By using the <code>.search</code> method in the <code>predict.SpCas9</code> module, it automatically designs all possible gRNAs from the given sequence and provides the predicted scores.</p> <p>Let's predict the DeepSpCas9 scores for all possible gRNAs that can be created from the sequences contained in the list_ex_seq obtained above.</p> <pre><code>import pandas as pd\nfrom genet.predict import SpCas9\n\n# Load DeepSpCas9 model\ncas_model = SpCas9()\nlist_out = []\n\n# Predict Cas9 scores\nfor ex_seq in list_ex_seq:\n    output = cas_model.search(ex_seq)\n\n    list_out.append(output)\n\n# Combine the result dataframes\nresults = pd.concat(list_out)\n\n# Save results as .csv file\nresults.to_csv('PATH_to_save', index=False)\n</code></pre> <p>So far, we have obtained scores for all possible gRNAs that can be created for BRCA1. By adding a one-line loop code for all other gene symbols, the materials for the genome-wide KO library are now complete.</p>"}]}